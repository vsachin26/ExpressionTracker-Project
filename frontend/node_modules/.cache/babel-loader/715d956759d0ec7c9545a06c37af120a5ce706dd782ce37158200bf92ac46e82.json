{"ast":null,"code":"var _jsxFileName = \"D:\\\\sachin\\\\frontend\\\\src\\\\components\\\\AnalysisPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useLocation } from 'react-router-dom';\n\n// const AnalysisPage = () => {\n//   const [results, setResults] = useState('Loading...');\n//   const [error, setError] = useState(null);\n//   const location = useLocation(); // Use location to get the query parameters\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(location.search); // Get query params from URL\n//     const user = urlParams.get('user'); // Get the 'user' parameter\n\n//     if (!user) {\n//       setResults(\"No user specified.\");\n//     } else {\n//       fetch(`/process-photos/${user}`)\n//         .then(response => response.json())\n//         .then(data => {\n//           if (data.success) {\n//             setResults(JSON.stringify(data.results, null, 2));\n//           } else {\n//             setResults(data.message || 'Error fetching analysis results.');\n//           }\n//         })\n//         .catch(error => {\n//           setError(error.message);\n//           setResults('Error: ' + error.message);\n//         });\n//     }\n//   }, [location]); // Re-run the effect when the location changes\n\n//   return (\n//     <div>\n//       <h1>Analysis Results</h1>\n//       <pre>{results}</pre>\n//       {error && <div style={{ color: 'red' }}>Error: {error}</div>}\n//     </div>\n//   );\n// };\n\n// export default AnalysisPage;\n\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalysisPage = () => {\n  _s();\n  const [results, setResults] = useState('Loading...');\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search);\n    const user = urlParams.get('user');\n    if (!user) {\n      setResults(\"No user specified.\");\n      return;\n    }\n    fetch(`/process-photos/${user}`).then(response => {\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response headers:\", response.headers);\n      return response.text(); // Read as text to debug the response\n    }).then(data => {\n      console.log(\"Raw response body:\", data); // Log the raw response\n      try {\n        const jsonData = JSON.parse(data); // Attempt to parse JSON\n        if (jsonData.success) {\n          setResults(JSON.stringify(jsonData.results, null, 2));\n        } else {\n          setResults(jsonData.message || 'Error fetching analysis results.');\n        }\n      } catch (err) {\n        console.error(\"Response is not valid JSON:\", data);\n        setResults('Received invalid JSON response.');\n      }\n    }).catch(error => {\n      console.error(\"Fetch error:\", error.message);\n      setError(error.message);\n      setResults('Error: ' + error.message);\n    });\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Analysis Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(AnalysisPage, \"o7OWghOSDYFAB8TfXD/PpT3/LbE=\", false, function () {\n  return [useLocation];\n});\n_c = AnalysisPage;\nexport default AnalysisPage;\nvar _c;\n$RefreshReg$(_c, \"AnalysisPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","AnalysisPage","_s","results","setResults","error","setError","location","urlParams","URLSearchParams","search","user","get","fetch","then","response","console","log","status","headers","text","data","jsonData","JSON","parse","success","stringify","message","err","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["D:/sachin/frontend/src/components/AnalysisPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useLocation } from 'react-router-dom';\r\n\r\n// const AnalysisPage = () => {\r\n//   const [results, setResults] = useState('Loading...');\r\n//   const [error, setError] = useState(null);\r\n//   const location = useLocation(); // Use location to get the query parameters\r\n\r\n//   useEffect(() => {\r\n//     const urlParams = new URLSearchParams(location.search); // Get query params from URL\r\n//     const user = urlParams.get('user'); // Get the 'user' parameter\r\n\r\n//     if (!user) {\r\n//       setResults(\"No user specified.\");\r\n//     } else {\r\n//       fetch(`/process-photos/${user}`)\r\n//         .then(response => response.json())\r\n//         .then(data => {\r\n//           if (data.success) {\r\n//             setResults(JSON.stringify(data.results, null, 2));\r\n//           } else {\r\n//             setResults(data.message || 'Error fetching analysis results.');\r\n//           }\r\n//         })\r\n//         .catch(error => {\r\n//           setError(error.message);\r\n//           setResults('Error: ' + error.message);\r\n//         });\r\n//     }\r\n//   }, [location]); // Re-run the effect when the location changes\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Analysis Results</h1>\r\n//       <pre>{results}</pre>\r\n//       {error && <div style={{ color: 'red' }}>Error: {error}</div>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisPage;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst AnalysisPage = () => {\r\n  const [results, setResults] = useState('Loading...');\r\n  const [error, setError] = useState(null);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(location.search);\r\n    const user = urlParams.get('user');\r\n\r\n    if (!user) {\r\n      setResults(\"No user specified.\");\r\n      return;\r\n    }\r\n\r\n    fetch(`/process-photos/${user}`)\r\n      .then(response => {\r\n        console.log(\"Response status:\", response.status);\r\n        console.log(\"Response headers:\", response.headers);\r\n        return response.text(); // Read as text to debug the response\r\n      })\r\n      .then(data => {\r\n        console.log(\"Raw response body:\", data); // Log the raw response\r\n        try {\r\n          const jsonData = JSON.parse(data); // Attempt to parse JSON\r\n          if (jsonData.success) {\r\n            setResults(JSON.stringify(jsonData.results, null, 2));\r\n          } else {\r\n            setResults(jsonData.message || 'Error fetching analysis results.');\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Response is not valid JSON:\", data);\r\n          setResults('Received invalid JSON response.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Fetch error:\", error.message);\r\n        setError(error.message);\r\n        setResults('Error: ' + error.message);\r\n      });\r\n  }, [location]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Analysis Results</h1>\r\n      <pre>{results}</pre>\r\n      {error && <div style={{ color: 'red' }}>Error: {error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}