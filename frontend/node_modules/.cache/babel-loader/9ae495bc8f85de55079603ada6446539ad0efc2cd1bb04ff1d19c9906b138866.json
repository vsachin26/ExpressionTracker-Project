{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import quizData from '../quizData';\n// import Confetti from './Confetti';\n// import './Quiz.css';\n\n// function QuizGame({ playerName }) {\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\n//   const [score, setScore] = useState(0);\n//   const [showScore, setShowScore] = useState(false);\n//   const [timeLeft, setTimeLeft] = useState(30);\n//   const [showConfetti, setShowConfetti] = useState(false);\n//   const [backgroundColor, setBackgroundColor] = useState('default');\n\n//   const handleNextQuestion = () => {\n//     setBackgroundColor('default');\n//     if (currentQuestion < quizData.length - 1) {\n//       setCurrentQuestion(currentQuestion + 1);\n//       setTimeLeft(30);\n//     } else {\n//       setShowScore(true);\n//       setShowConfetti(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (timeLeft > 0) {\n//       const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//       return () => clearTimeout(timer);\n//     } else {\n//       handleNextQuestion();\n//     }\n//   }, [timeLeft]);\n\n//   const handleAnswerOptionClick = (index) => {\n//     if (index === quizData[currentQuestion].answer) {\n//       setScore(score + 1);\n//       setBackgroundColor('correct');\n//     } else {\n//       setBackgroundColor('incorrect');\n//     }\n//     setTimeout(handleNextQuestion, 2000);\n//   };\n\n//   const handleRestartQuiz = () => {\n//     setCurrentQuestion(0);\n//     setScore(0);\n//     setShowScore(false);\n//     setTimeLeft(30);\n//     setShowConfetti(false);\n//     setBackgroundColor('default');\n//   };\n\n//   return (\n//     <div className={`one ${backgroundColor}`}>\n//       <div className=\"quiz\">\n//         {showConfetti && <Confetti />}\n//         {showScore ? (\n//           <div className=\"score-section\">\n//             <h1>ðŸŽ‰ Congratulations {playerName}! ðŸŽ‰</h1>\n//             <h2>Your Score: {score} / {quizData.length}</h2>\n//             <button onClick={handleRestartQuiz}>Restart Quiz</button>\n//           </div>\n//         ) : (\n//           <>\n//             <div className=\"progress-bar\">\n//               <div\n//                 className=\"progress-bar-fill\"\n//                 style={{\n//                   width: `${((currentQuestion + 1) / quizData.length) * 100}%`,\n//                 }}\n//               ></div>\n//             </div>\n//             <div className=\"timer\">Time Left: {timeLeft}s</div>\n//             <div className=\"question-section\">\n//               <h2>{quizData[currentQuestion].question}</h2>\n//               {quizData[currentQuestion].image && (\n//                 <img\n//                   src={quizData[currentQuestion].image}\n//                   alt=\"quiz illustration\"\n//                 />\n//               )}\n//               <div className=\"options\">\n//                 {quizData[currentQuestion].options.map((option, index) => (\n//                   <button\n//                     key={index}\n//                     onClick={() => handleAnswerOptionClick(index)}\n//                     className=\"option-button\"\n//                   >\n//                     {option}\n//                   </button>\n//                 ))}\n//               </div>\n//             </div>\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default QuizGame;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import quizData from '../quizData';\n// import Confetti from './Confetti';\n// import './Quiz.css';\n\n// function QuizGame({ playerName }) {\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\n//   const [score, setScore] = useState(0);\n//   const [showScore, setShowScore] = useState(false);\n//   const [timeLeft, setTimeLeft] = useState(30);\n//   const [showConfetti, setShowConfetti] = useState(false);\n//   const [backgroundColor, setBackgroundColor] = useState('default');\n//   const videoRef = useRef(null);\n//   const captureInterval = useRef(null);\n\n//   const handleNextQuestion = () => {\n//     setBackgroundColor('default');\n//     if (currentQuestion < quizData.length - 1) {\n//       setCurrentQuestion(currentQuestion + 1);\n//       setTimeLeft(30);\n//     } else {\n//       setShowScore(true);\n//       setShowConfetti(true);\n//     }\n//   };\n\n//   // Timer for each question\n//   useEffect(() => {\n//     if (timeLeft > 0) {\n//       const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//       return () => clearTimeout(timer);\n//     } else {\n//       handleNextQuestion();\n//     }\n//   }, [timeLeft]);\n\n//   // Handle answer selection\n//   const handleAnswerOptionClick = (index) => {\n//     if (index === quizData[currentQuestion].answer) {\n//       setScore(score + 1);\n//       setBackgroundColor('correct');\n//     } else {\n//       setBackgroundColor('incorrect');\n//     }\n//     setTimeout(handleNextQuestion, 2000);\n//   };\n\n//   // Handle quiz restart\n//   const handleRestartQuiz = () => {\n//     setCurrentQuestion(0);\n//     setScore(0);\n//     setShowScore(false);\n//     setTimeLeft(30);\n//     setShowConfetti(false);\n//     setBackgroundColor('default');\n//   };\n\n//   // Capture images every 5 seconds\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         videoRef.current.srcObject = stream;\n//         videoRef.current.play();\n\n//         // Set up image capturing interval\n//         captureInterval.current = setInterval(() => {\n//           captureImage();\n//         }, 5000);\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     const captureImage = () => {\n//       if (videoRef.current && !showScore) {\n//         const canvas = document.createElement('canvas');\n//         canvas.width = videoRef.current.videoWidth;\n//         canvas.height = videoRef.current.videoHeight;\n//         const ctx = canvas.getContext('2d');\n//         ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n//         const imageData = canvas.toDataURL('image/jpeg');\n\n//         // Send image to the backend\n//         fetch('http://localhost:5000/upload-image', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({\n//             username: playerName,\n//             image: imageData,\n//           }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             if (!data.success) {\n//               console.error('Failed to save image:', data.message);\n//             }\n//           })\n//           .catch((error) => console.error('Error uploading image:', error));\n//       }\n//     };\n\n//     if (!showScore) {\n//       startWebcam();\n//     }\n\n//     return () => {\n//       // Clean up webcam and stop intervals\n//       if (videoRef.current?.srcObject) {\n//         videoRef.current.srcObject.getTracks().forEach((track) => track.stop());\n//       }\n//       clearInterval(captureInterval.current);\n//     };\n//   }, [showScore, playerName]);\n\n//   return (\n//     <div className={`one ${backgroundColor}`}>\n//       <div className=\"quiz\">\n//         <video ref={videoRef} style={{ display: 'none' }} />\n//         {showConfetti && <Confetti />}\n//         {showScore ? (\n//           <div className=\"score-section\">\n//             <h1>ðŸŽ‰ Congratulations {playerName}! ðŸŽ‰</h1>\n//             <h2>Your Score: {score} / {quizData.length}</h2>\n//             <button onClick={handleRestartQuiz}>Restart Quiz</button>\n//           </div>\n//         ) : (\n//           <>\n//             <div className=\"progress-bar\">\n//               <div\n//                 className=\"progress-bar-fill\"\n//                 style={{\n//                   width: `${((currentQuestion + 1) / quizData.length) * 100}%`,\n//                 }}\n//               ></div>\n//             </div>\n//             <div className=\"timer\">Time Left: {timeLeft}s</div>\n//             <div className=\"question-section\">\n//               <h2>{quizData[currentQuestion].question}</h2>\n//               {quizData[currentQuestion].image && (\n//                 <img\n//                   src={quizData[currentQuestion].image}\n//                   alt=\"quiz illustration\"\n//                 />\n//               )}\n//               <div className=\"options\">\n//                 {quizData[currentQuestion].options.map((option, index) => (\n//                   <button\n//                     key={index}\n//                     onClick={() => handleAnswerOptionClick(index)}\n//                     className=\"option-button\"\n//                   >\n//                     {option}\n//                   </button>\n//                 ))}\n//               </div>\n//             </div>\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default QuizGame;","map":{"version":3,"names":[],"sources":["D:/sachin/frontend/src/components/QuizGame.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import quizData from '../quizData';\r\n// import Confetti from './Confetti';\r\n// import './Quiz.css';\r\n\r\n// function QuizGame({ playerName }) {\r\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n//   const [score, setScore] = useState(0);\r\n//   const [showScore, setShowScore] = useState(false);\r\n//   const [timeLeft, setTimeLeft] = useState(30);\r\n//   const [showConfetti, setShowConfetti] = useState(false);\r\n//   const [backgroundColor, setBackgroundColor] = useState('default');\r\n\r\n//   const handleNextQuestion = () => {\r\n//     setBackgroundColor('default');\r\n//     if (currentQuestion < quizData.length - 1) {\r\n//       setCurrentQuestion(currentQuestion + 1);\r\n//       setTimeLeft(30);\r\n//     } else {\r\n//       setShowScore(true);\r\n//       setShowConfetti(true);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (timeLeft > 0) {\r\n//       const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//       return () => clearTimeout(timer);\r\n//     } else {\r\n//       handleNextQuestion();\r\n//     }\r\n//   }, [timeLeft]);\r\n\r\n//   const handleAnswerOptionClick = (index) => {\r\n//     if (index === quizData[currentQuestion].answer) {\r\n//       setScore(score + 1);\r\n//       setBackgroundColor('correct');\r\n//     } else {\r\n//       setBackgroundColor('incorrect');\r\n//     }\r\n//     setTimeout(handleNextQuestion, 2000);\r\n//   };\r\n\r\n//   const handleRestartQuiz = () => {\r\n//     setCurrentQuestion(0);\r\n//     setScore(0);\r\n//     setShowScore(false);\r\n//     setTimeLeft(30);\r\n//     setShowConfetti(false);\r\n//     setBackgroundColor('default');\r\n//   };\r\n\r\n//   return (\r\n//     <div className={`one ${backgroundColor}`}>\r\n//       <div className=\"quiz\">\r\n//         {showConfetti && <Confetti />}\r\n//         {showScore ? (\r\n//           <div className=\"score-section\">\r\n//             <h1>ðŸŽ‰ Congratulations {playerName}! ðŸŽ‰</h1>\r\n//             <h2>Your Score: {score} / {quizData.length}</h2>\r\n//             <button onClick={handleRestartQuiz}>Restart Quiz</button>\r\n//           </div>\r\n//         ) : (\r\n//           <>\r\n//             <div className=\"progress-bar\">\r\n//               <div\r\n//                 className=\"progress-bar-fill\"\r\n//                 style={{\r\n//                   width: `${((currentQuestion + 1) / quizData.length) * 100}%`,\r\n//                 }}\r\n//               ></div>\r\n//             </div>\r\n//             <div className=\"timer\">Time Left: {timeLeft}s</div>\r\n//             <div className=\"question-section\">\r\n//               <h2>{quizData[currentQuestion].question}</h2>\r\n//               {quizData[currentQuestion].image && (\r\n//                 <img\r\n//                   src={quizData[currentQuestion].image}\r\n//                   alt=\"quiz illustration\"\r\n//                 />\r\n//               )}\r\n//               <div className=\"options\">\r\n//                 {quizData[currentQuestion].options.map((option, index) => (\r\n//                   <button\r\n//                     key={index}\r\n//                     onClick={() => handleAnswerOptionClick(index)}\r\n//                     className=\"option-button\"\r\n//                   >\r\n//                     {option}\r\n//                   </button>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default QuizGame;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import quizData from '../quizData';\r\n// import Confetti from './Confetti';\r\n// import './Quiz.css';\r\n\r\n// function QuizGame({ playerName }) {\r\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n//   const [score, setScore] = useState(0);\r\n//   const [showScore, setShowScore] = useState(false);\r\n//   const [timeLeft, setTimeLeft] = useState(30);\r\n//   const [showConfetti, setShowConfetti] = useState(false);\r\n//   const [backgroundColor, setBackgroundColor] = useState('default');\r\n//   const videoRef = useRef(null);\r\n//   const captureInterval = useRef(null);\r\n\r\n//   const handleNextQuestion = () => {\r\n//     setBackgroundColor('default');\r\n//     if (currentQuestion < quizData.length - 1) {\r\n//       setCurrentQuestion(currentQuestion + 1);\r\n//       setTimeLeft(30);\r\n//     } else {\r\n//       setShowScore(true);\r\n//       setShowConfetti(true);\r\n//     }\r\n//   };\r\n\r\n//   // Timer for each question\r\n//   useEffect(() => {\r\n//     if (timeLeft > 0) {\r\n//       const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//       return () => clearTimeout(timer);\r\n//     } else {\r\n//       handleNextQuestion();\r\n//     }\r\n//   }, [timeLeft]);\r\n\r\n//   // Handle answer selection\r\n//   const handleAnswerOptionClick = (index) => {\r\n//     if (index === quizData[currentQuestion].answer) {\r\n//       setScore(score + 1);\r\n//       setBackgroundColor('correct');\r\n//     } else {\r\n//       setBackgroundColor('incorrect');\r\n//     }\r\n//     setTimeout(handleNextQuestion, 2000);\r\n//   };\r\n\r\n//   // Handle quiz restart\r\n//   const handleRestartQuiz = () => {\r\n//     setCurrentQuestion(0);\r\n//     setScore(0);\r\n//     setShowScore(false);\r\n//     setTimeLeft(30);\r\n//     setShowConfetti(false);\r\n//     setBackgroundColor('default');\r\n//   };\r\n\r\n//   // Capture images every 5 seconds\r\n//   useEffect(() => {\r\n//     const startWebcam = async () => {\r\n//       try {\r\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//         videoRef.current.srcObject = stream;\r\n//         videoRef.current.play();\r\n\r\n//         // Set up image capturing interval\r\n//         captureInterval.current = setInterval(() => {\r\n//           captureImage();\r\n//         }, 5000);\r\n//       } catch (error) {\r\n//         console.error('Error accessing webcam:', error);\r\n//       }\r\n//     };\r\n\r\n//     const captureImage = () => {\r\n//       if (videoRef.current && !showScore) {\r\n//         const canvas = document.createElement('canvas');\r\n//         canvas.width = videoRef.current.videoWidth;\r\n//         canvas.height = videoRef.current.videoHeight;\r\n//         const ctx = canvas.getContext('2d');\r\n//         ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n//         const imageData = canvas.toDataURL('image/jpeg');\r\n\r\n//         // Send image to the backend\r\n//         fetch('http://localhost:5000/upload-image', {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify({\r\n//             username: playerName,\r\n//             image: imageData,\r\n//           }),\r\n//         })\r\n//           .then((response) => response.json())\r\n//           .then((data) => {\r\n//             if (!data.success) {\r\n//               console.error('Failed to save image:', data.message);\r\n//             }\r\n//           })\r\n//           .catch((error) => console.error('Error uploading image:', error));\r\n//       }\r\n//     };\r\n\r\n//     if (!showScore) {\r\n//       startWebcam();\r\n//     }\r\n\r\n//     return () => {\r\n//       // Clean up webcam and stop intervals\r\n//       if (videoRef.current?.srcObject) {\r\n//         videoRef.current.srcObject.getTracks().forEach((track) => track.stop());\r\n//       }\r\n//       clearInterval(captureInterval.current);\r\n//     };\r\n//   }, [showScore, playerName]);\r\n\r\n//   return (\r\n//     <div className={`one ${backgroundColor}`}>\r\n//       <div className=\"quiz\">\r\n//         <video ref={videoRef} style={{ display: 'none' }} />\r\n//         {showConfetti && <Confetti />}\r\n//         {showScore ? (\r\n//           <div className=\"score-section\">\r\n//             <h1>ðŸŽ‰ Congratulations {playerName}! ðŸŽ‰</h1>\r\n//             <h2>Your Score: {score} / {quizData.length}</h2>\r\n//             <button onClick={handleRestartQuiz}>Restart Quiz</button>\r\n//           </div>\r\n//         ) : (\r\n//           <>\r\n//             <div className=\"progress-bar\">\r\n//               <div\r\n//                 className=\"progress-bar-fill\"\r\n//                 style={{\r\n//                   width: `${((currentQuestion + 1) / quizData.length) * 100}%`,\r\n//                 }}\r\n//               ></div>\r\n//             </div>\r\n//             <div className=\"timer\">Time Left: {timeLeft}s</div>\r\n//             <div className=\"question-section\">\r\n//               <h2>{quizData[currentQuestion].question}</h2>\r\n//               {quizData[currentQuestion].image && (\r\n//                 <img\r\n//                   src={quizData[currentQuestion].image}\r\n//                   alt=\"quiz illustration\"\r\n//                 />\r\n//               )}\r\n//               <div className=\"options\">\r\n//                 {quizData[currentQuestion].options.map((option, index) => (\r\n//                   <button\r\n//                     key={index}\r\n//                     onClick={() => handleAnswerOptionClick(index)}\r\n//                     className=\"option-button\"\r\n//                   >\r\n//                     {option}\r\n//                   </button>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default QuizGame;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}